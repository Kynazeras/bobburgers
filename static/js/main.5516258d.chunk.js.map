{"version":3,"sources":["Bob's_Burgers.svg","components/EpisodeInfo/EpisodeInfo.js","context.js","components/RandomButton/RandomButton.js","components/Burger/Burger.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","EpisodeContainer","styled","div","_templateObject","EpisodeInfo","_ref","episodeName","episodeNum","trivia","id","react_default","a","createElement","className","map","key","Context","React","createContext","Provider","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","burgers","inherits","createClass","value","console","log","data","setState","props","children","Component","Consumer","RandomButton","refresh","onClick","type","role","aria-label","Board","Burger_templateObject","BotdName","h4","_templateObject2","BoardRule","hr","_templateObject3","Burger","botd","e","forceUpdate","_this2","Math","floor","random","components_RandomButton_RandomButton","name","components_EpisodeInfo_EpisodeInfo","document","body","style","App","context_Provider","src","logo","alt","components_Burger_Burger","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5516258d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Bob's_Burgers.39865cc8.svg\";","import React from \"react\";\nimport styled from \"styled-components\";\nimport \"./EpisodeInfo.css\";\n\nconst EpisodeContainer = styled.div`\n  border: 1px solid #f7da1e;\n  padding: 5px;\n`;\n\nconst EpisodeInfo = ({ episodeName, episodeNum, trivia, id }) => {\n  return (\n    <div className=\"container\">\n      <EpisodeContainer>\n        <h3>Episode Info:</h3>\n        <hr />\n        <h4>\n          Name: {episodeName} ({episodeNum})\n        </h4>\n        <ul>\n          {trivia.map(trivia => (\n            <li key={trivia}>{trivia}</li>\n          ))}\n        </ul>\n      </EpisodeContainer>\n    </div>\n  );\n};\n\nexport default EpisodeInfo;\n","import React, { Component } from \"react\";\nimport data from \"./burgers.json\";\n\nconst Context = React.createContext();\n\nexport class Provider extends Component {\n  state = {\n    burgers: []\n  };\n\n  componentWillMount() {\n    console.log(data.burgers);\n    this.setState({ burgers: data.burgers });\n  }\n\n  render() {\n    return (\n      <Context.Provider value={this.state}>\n        {this.props.children}\n      </Context.Provider>\n    );\n  }\n}\n\nexport const Consumer = Context.Consumer;\n","import React from \"react\";\n\nconst RandomButton = ({ refresh }) => {\n  return (\n    <div className=\"container\">\n      <button\n        onClick={refresh}\n        type=\"button\"\n        className=\"btn btn-warning btn-lg\"\n      >\n        <span role=\"img\" aria-label=\"burger\">\n          üçî\n        </span>\n      </button>\n    </div>\n  );\n};\n\nexport default RandomButton;\n","import React, { Component } from \"react\";\nimport \"./Burger.css\";\nimport EpisodeInfo from \"../EpisodeInfo/EpisodeInfo\";\nimport { Consumer } from \"../../context\";\nimport RandomButton from \"../RandomButton/RandomButton\";\nimport styled from \"styled-components\";\n\nconst Board = styled.div`\n  width: 300px;\n  height: 300px;\n  background-color: #6b6e76;\n  border: 10px solid #af4844;\n  color: white;\n  padding: 2px;\n  margin: 5% auto;\n`;\n\nconst BotdName = styled.h4`\n  margin-top: 40px;\n`;\n\nconst BoardRule = styled.hr`\n  width: 75%;\n  border-color: white;\n`;\n\nclass Burger extends Component {\n  state = {\n    botd: {}\n  };\n\n  refresh = e => {\n    this.forceUpdate();\n  };\n\n  render() {\n    return (\n      <Consumer>\n        {value => {\n          const { burgers } = value;\n          const botd = burgers[Math.floor(Math.random() * burgers.length)];\n          return (\n            <div className=\"container\">\n              <RandomButton refresh={this.refresh} />\n              <div className=\"container\">\n                <Board>\n                  <h1>Burger</h1>\n                  <h3>Of The Day</h3>\n                  <BoardRule />\n                  <BotdName>{botd.name}</BotdName>\n                  <h4>$5.95</h4>\n                </Board>\n                <EpisodeInfo\n                  episodeName={botd.episodeName}\n                  episodeNum={botd.episodeNum}\n                  trivia={botd.trivia}\n                />\n              </div>\n            </div>\n          );\n        }}\n      </Consumer>\n    );\n  }\n}\n\nexport default Burger;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport logo from \"./Bob's_Burgers.svg\";\nimport Burger from \"./components/Burger/Burger\";\nimport { Provider } from \"./context\";\n\ndocument.body.style = \"background: black;\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider>\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <img src={logo} className=\"logo\" alt=\"logo\" />\n          </header>\n          <Burger />\n        </div>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}