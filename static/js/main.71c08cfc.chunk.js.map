{"version":3,"sources":["Bob's_Burgers.svg","components/EpisodeInfo/EpisodeInfo.js","context.js","components/RandomButton/RandomButton.js","components/Burger/Burger.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","EpisodeInfo","_ref","episodeName","episodeNum","trivia","react_default","a","createElement","className","map","Context","React","createContext","Provider","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","burgers","name","inherits","createClass","key","value","props","children","Component","Consumer","RandomButton","refresh","onClick","type","class","Burger","botd","e","forceUpdate","_this2","Math","floor","random","components_RandomButton_RandomButton","components_EpisodeInfo_EpisodeInfo","document","body","style","App","context_Provider","src","logo","alt","components_Burger_Burger","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.71c08cfc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Bob's_Burgers.39865cc8.svg\";","import React from \"react\";\nimport \"./EpisodeInfo.css\";\n\nconst EpisodeInfo = ({ episodeName, episodeNum, trivia }) => {\n  return (\n    <div>\n      <div className=\"container episodeContainer\">\n        <h3>Episode Info:</h3>\n        <hr />\n        <h4>\n          Name: {episodeName}({episodeNum})\n        </h4>\n        <ul>\n          {trivia.map(trivia => (\n            <li>{trivia}</li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nexport default EpisodeInfo;\n","import React, { Component } from \"react\";\n\nconst Context = React.createContext();\n\nexport class Provider extends Component {\n  state = {\n    burgers: [\n      {\n        name: \"New Bacon-ings\",\n        episodeName: \"Human Flesh\",\n        episodeNum: \"S01E01\",\n        trivia: [\n          \"A pun on the phrase 'New Beginnings', and reference to the restaurant's grand re-re-re opening\"\n        ]\n      },\n      {\n        name: \"The Child Mollester\",\n        episodeName: \"Human Flesh\",\n        episodeNum: \"S01E01\",\n        trivia: [\n          \"A reference to child molesters' using candy to lure their victims\",\n          \"This was written by Louise\",\n          \"One person was shown to have ordered the burger, which made Bob very uneasy and refused to let Tina or Louise serve the man\"\n        ]\n      },\n      {\n        name: \"Foot Feta-ish Burger\",\n        episodeName: \"Crawl Space\",\n        episodeNum: \"S01E02\",\n        trivia: [\n          \"Comes with feta cheese\",\n          \"A pun on 'foot fetish'\",\n          \"Bob intended this to be the Never Been Feta burger, but Louise changed it\"\n        ]\n      },\n      {\n        name: \"Tunami\",\n        episodeName: \"Crawl Space\",\n        episodeNum: \"S01E02\",\n        trivia: [\n          \"A portmanteau of the words 'tuna' and 'tsunami'\",\n          \"The Tunami is Gloria's recipe, which Linda deemed the Burger of the Day while Bob was trapped in the wall\"\n        ]\n      },\n      {\n        name: \"Mission A-Corn-Plished Burger\",\n        episodeName: \"Sacred Cow\",\n        episodeNum: \"S01E03\",\n        trivia: [\"Pun on the phrase 'Mission accomplished'\"]\n      },\n      {\n        name: \"Pepper Don't Preach Burger\",\n        episodeName: \"Sacred Cow\",\n        episodeNum: \"S01E03\",\n        trivia: [\n          \"A pun on the 1986 song by Madonna entitled 'Papa Don't Preach'\"\n        ]\n      },\n      {\n        name: \"Rest in Peas Burger\",\n        episodeName: \"Sacred Cow\",\n        episodeNum: \"S01E03\",\n        trivia: [\n          \"A pun on the phrase 'rest in peace,' and a reference to the death of the cow, Moolissa.\",\n          \"Comes with snap peas and carrots\",\n          \"Bob's 100,000th burger\",\n          \"Made of meat from Moo-Lissa\"\n        ]\n      }\n    ]\n  };\n\n  render() {\n    return (\n      <Context.Provider value={this.state}>\n        {this.props.children}\n      </Context.Provider>\n    );\n  }\n}\n\nexport const Consumer = Context.Consumer;\n","import React from \"react\";\n\nconst RandomButton = ({ refresh }) => {\n  return (\n    <button onClick={refresh} type=\"button\" class=\"btn btn-warning\">\n      New Burger\n    </button>\n  );\n};\n\nexport default RandomButton;\n","import React, { Component } from \"react\";\nimport \"./Burger.css\";\nimport EpisodeInfo from \"../EpisodeInfo/EpisodeInfo\";\nimport { Consumer } from \"../../context\";\nimport RandomButton from \"../RandomButton/RandomButton\";\n\nclass Burger extends Component {\n  state = {\n    botd: {}\n  };\n\n  refresh = e => {\n    this.forceUpdate();\n  };\n\n  render() {\n    return (\n      <Consumer>\n        {value => {\n          const burgers = value.burgers;\n          const botd = burgers[Math.floor(Math.random() * burgers.length)];\n          return (\n            <div>\n              <RandomButton refresh={this.refresh} />\n              <div className=\"container\">\n                <div className=\"board\">\n                  <h1>Burger</h1>\n                  <h3>Of The Day</h3>\n                  <hr />\n                  <h4 className=\"botd-name\">{botd.name}</h4>\n                  <h4>$5.95</h4>\n                </div>\n                <EpisodeInfo\n                  episodeName={botd.episodeName}\n                  episodeNum={botd.episodeNum}\n                  trivia={botd.trivia}\n                />\n              </div>\n            </div>\n          );\n        }}\n      </Consumer>\n    );\n  }\n}\n\nexport default Burger;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport logo from \"./Bob's_Burgers.svg\";\nimport Burger from \"./components/Burger/Burger\";\nimport { Provider } from \"./context\";\n\ndocument.body.style = \"background: black;\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider>\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <img src={logo} className=\"logo\" alt=\"logo\" />\n          </header>\n          <Burger />\n        </div>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}